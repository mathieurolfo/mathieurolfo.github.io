<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/css" href="../css/main.css"?>



<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" onclick="vennClicked(event)" onmousemove="vennMoused(event)" viewBox="0 0 380 350">
	<defs>
	  <style type="text/css">@import url(http://fonts.googleapis.com/css?family=Rubik:300);</style>
	</defs>

	
	<circle id="code-circle" cx="125" cy="125" r="120" stroke="black" fill="blue" stroke-width="2" fill-opacity="0.4"/>

	<circle id="people-circle" cx="240" cy="125" r="120" stroke="black" stroke-width="2" fill-opacity="0.4" fill="red" />


	<!-- <a id="code-link" xmlns:xlink="http://www.w3.org/1999/xlink" data-href="/projects" target="_parent"> -->
		<text id="code-text" x="38" y="130" fill="white" margin="5px" text-shadow="-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black">code</text>
	<!-- </a> -->


	<!-- <a href="/projects" target="_parent"> -->
		<text id="design-text" x="145" y="130" fill="white" >design</text>
	<!-- </a> -->

	<!-- <a href="/projects" target="_parent"> -->
		<text id="people-text" x="265" y="130" fill="white" >people</text>
	<!-- </a> -->
	<script type="text/javascript">
		//<![CDATA[



		function inCircle(event, circleX, circleY, radius) {
			var loc = adjustPoint(event);
			return (Math.pow(loc.x-circleX,2) + Math.pow(loc.y-circleY,2) < Math.pow(radius,2));
		}

		function inOverlap(event) {
			if (inCircle(event, 125, 125, 120) && inCircle(event, 240, 125, 120)) {
				return true;
			}
		}

		function inDiagram(event) {
			return (inCircle(event, 125, 125, 120) || inCircle(event, 240, 125, 120));
		}

		function vennMoused(event) {
			
			if (inDiagram(event)) {
				event.target.style.cursor = "pointer";
			}
			
			if (inCircle(event, 125, 125, 120, "code-circle")) {
				document.getElementById("code-circle").setAttribute('fill-opacity', '0.7');
				document.getElementById("code-text").setAttribute('text-decoration', 'underline');
			} else {
				document.getElementById("code-circle").setAttribute('fill-opacity', '0.4');
				document.getElementById("code-text").setAttribute('text-decoration', 'none');
			}

			if (inCircle(event, 240, 125, 120)) {
				document.getElementById("people-circle").setAttribute('fill-opacity', '0.7');
				document.getElementById("people-text").setAttribute('text-decoration', 'underline');
			} else {
				document.getElementById("people-circle").setAttribute('fill-opacity', '0.4');
				document.getElementById("people-text").setAttribute('text-decoration', 'none');
			}
			if (inOverlap(event)) {
				document.getElementById("code-text").setAttribute('text-decoration', 'none');
				document.getElementById("people-text").setAttribute('text-decoration', 'none');
				document.getElementById("design-text").setAttribute('text-decoration', 'underline');
			} else {
				document.getElementById("design-text").setAttribute('text-decoration', 'none');
			}
		}

		function adjustPoint(event) {
			var svg = document.querySelector('svg')
			var pt = svg.createSVGPoint();
			pt.x = event.clientX; 
			pt.y = event.clientY;
			var actualPt = pt.matrixTransform(svg.getScreenCTM().inverse());
			return actualPt;
		}

		function vennClicked(event) {
			if (inOverlap(event)) {
				parent.window.location.href = '/projects';
			} else if (inCircle(event, 125, 125, 120)) {
				parent.window.location.href = '/projects/code';
			} else if (inCircle(event, 240, 125, 120)) {
				parent.window.location.href = '/projects/people'; 
			}
		}

	//]]>
	</script>

	<!-- <path id="arc1" fill="white" stroke="white" stroke-width="2" opacity="0.5"/> -->
	<!-- <script type="text/javascript">
	//<![CDATA[
		document.getElementById("arc1").setAttribute("d", mapArc(155, 105, 100, 0, 220));

		function polarToCartesian(centerX, centerY, radius, angleInDegrees) {
			var angleInRadians = (angleInDegrees-90) *Math.PI / 180.0;
			return {
				x: centerX + (radius*Math.cos(angleInRadians)),
				y: centerY + (radius*Math.sin(angleInRadians))
			};
		};

		function mapArc(x, y, radius, startAngle, endAngle) {
			var start = polarToCartesian(x, y, radius, endAngle);
			var end = polarToCartesian(x, y, radius, startAngle);
			var arc = endAngle - startAngle <= 180 ? "0" : "1";
			var d = [
				"M", start.x, start.y, 
				"A", radius, radius, 0, arc, 0, end.x, end.y,
				"L", x, y, 
				"L", start.x, start.y
			].join(" ");
			return d;
		}
	//]]>
	</script>
 -->
</svg>

